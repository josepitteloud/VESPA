/*################################################################################ Created on:   06/05/2013# Created by:   Sebastian Bednaszynski (SBE)# Description:  Returns a view including all relevant source tables for the defined#               period of time. View name must be defined asa parameter and is created#               within the procedure executor's schema.## List of steps:#               STEP 0.1 - preparing environment#               STEP 0.2 - requirement checks#               STEP 1.0 - creating source data view## To do:#               - N/A################################################################################### Dependencies# ------------------------------------------------------------------------------# (none)################################################################################### Change log# ------------------------------------------------------------------------------# 06/05/2013  SBE   v01 - initial version################################################################################*/if object_id('vespa_getSourceDataView_v01') is not null drop procedure vespa_getSourceDataView_v01;commit;gocreate procedure vespa_getSourceDataView_v01      @parStartDate             date = null,                          -- Start date      @parEndDate               date = null,                          -- End date      @parOutputViewName        varchar(100) = null,                   -- Output view name      @parLogQADetails          bit = 1,                              -- If "1" then each completed step triggers Logger event      @parRefreshIdentifier     varchar(40) = '',                     -- Logger - refresh identifier      @parBuildId               bigint = null                         -- Logger - add events to an existing logger processasbegin -- #### (procedure start) #####        -- ##############################################################################################################        -- ##### STEP 1.0 - preparing environment                                                                   #####        -- ##############################################################################################################        -- ###############################################################################        -- ##### Define and set variables                                            #####        -- ###############################################################################      declare @varOutputViewName              varchar(100)      declare @varSourceTable                 varchar(100)        -- VEA or DP Prog table description      declare @varUsername                    varchar(20)         -- User running the procedure      declare @varBuildId                     bigint      declare @varProcessIdentifier           varchar(20)         -- Logger - process ID      declare @varQAResult                    integer      declare @varColumnList                  varchar(5000)      declare @varSql                         text      declare @varDate                        date                -- temp Date variable      declare @varInt                         int                 -- temp Int variable        -- Initial value assignments      set @varProcessIdentifier         = 'getSrcDataView_v01'      set @varUsername                  = user_name()      set @varOutputViewName            = @varUsername || '.' || @parOutputViewName      set @varSourceTable               = '???'      set @varColumnList                = 'pk_viewing_prog_instance_fact, cb_change_date, dk_barb_min_end_datehour_dim, dk_barb_min_end_time_dim,                                           dk_barb_min_start_datehour_dim, dk_barb_min_start_time_dim, dk_broadcast_end_datehour_dim, dk_broadcast_end_time_dim,                                           dk_broadcast_start_datehour_dim, dk_broadcast_start_time_dim, dk_card_dim, dk_channel_dim, dk_customer_dim,                                           dk_event_end_datehour_dim, dk_event_end_time_dim, dk_event_start_datehour_dim, dk_event_start_time_dim,                                           dk_instance_end_datehour_dim, dk_instance_end_time_dim, dk_instance_start_datehour_dim, dk_instance_start_time_dim,                                           dk_log_received_datehour_dim, dk_log_received_time_dim, dk_log_start_datehour_dim, dk_log_start_time_dim,                                           dk_next_channel_dim, dk_next_instance_start_datehour_dim, dk_next_instance_start_time_dim, dk_next_programme_dim,                                           dk_next_programme_instance_dim, dk_playback_dim, dk_previous_channel_dim, dk_previous_instance_start_datehour_dim,                                           dk_previous_instance_start_time_dim, dk_previous_programme_dim, dk_previous_programme_instance_dim, dk_programme_dim,                                           dk_programme_instance_dim, dk_session_start_datehour_dim, dk_session_start_time_dim, dk_viewing_event_dim, duration,                                           duration_since_last_viewing_event, time_in_seconds_since_recording, black_and_white_flag, closed_caption_flag,                                           episode_broadcast_count, language, last_in_series_indicator_flag, marketing_message, new_series_indicator_flag,                                           new_show_flag, parental_rating_description, premiere_indicator_flag, programme_instance_duration, programme_instance_name,                                           repeat_flag, series_inclusion_flag, series_link_chain, sign_language_flag, sms_grading, sound_type_description, stereo_flag,                                           episode_number, episodes_in_series, genre_description, programme_name, season_ref, sub_genre_description, synopsis,                                           traffic_key, programme_id, barb_channel, barb_code, barb_name, bss_code, bss_name, channel_genre, channel_name, epg_group,                                           epg_group_name, grouping_indicator, network_indicator, pay_free_indicator, sensitive_channel, service_key, service_start_datetime,                                           service_type, service_type_description, type_of_viewing_event, multiroom_indicator, account_number, panel_id, personalisation_flag,                                           cb_key_family, cb_key_individual, cb_key_household, src_system_id, live_recorded, platform, playback_speed, playback_type,                                           reported_playback_speed, application_id, audio_track_tag, data_track_tag, document_version, producer_id, video_playing_flag,                                           video_track_tag, broadcast_start_date_time_utc, broadcast_end_date_time_utc, barb_min_start_date_time_utc,                                           barb_min_end_date_time_utc, event_start_date_time_utc, event_end_date_time_utc, instance_start_date_time_utc,                                           instance_end_date_time_utc, log_received_start_date_time_utc, log_start_date_time_utc, session_start_date_time_utc,                                           instance_start_date_broadcast, next_genre_description, next_programme_name, next_sub_genre_description, next_channel_name,                                           previous_genre_description, previous_programme_name, previous_sub_genre_description, previous_channel_name, subtitle_flag,                                           surround_flag, three_d_flag, true_hd_flag, wide_screen_flag, broadcast_time_of_day, spot_standard_daypart_ie,                                           spot_standard_daypart_uk, subscriber_id, service_instance_id, service_instance_type, barb_reported_flag, capped_full_flag,                                           capped_partial_flag, duration_minutes, duration_attributed, dk_viewing_instance_dim, dk_capping_metadata_dim,                                           dk_capping_threshold_dim, dk_capping_end_datehour_dim, dk_capping_end_time_dim, capping_end_date_time_utc, capping_end_date_time_local '      if (@parBuildId is not null)          set @varBuildId = @parBuildId        -- ###############################################################################        -- ##### Create logger event                                                 #####        -- ###############################################################################      if (@parBuildId is null)          execute logger_create_run @varProcessIdentifier, @parRefreshIdentifier, @varBuildId output      execute logger_add_event @varBuildId, 3, '####### Creating source data view for ' || dateformat(@parStartDate, 'dd/mm/yyyy') || ' - ' ||                                               dateformat(@parEndDate, 'dd/mm/yyyy') || ' - process started #######', null      if (@parLogQADetails = 0)          execute logger_add_event @varBuildId, 3, '(note: quiet mode, reporting only warnings and errors)'      else          execute logger_add_event @varBuildId, 3, '(note: full reporting mode, reporting all details)'      set @varQAResult = -1      commit      execute logger_add_event @varBuildId, 3, '>>>>> Step 0.1: Preparing environment <<<<<', null      if (@parLogQADetails = 1)        begin            execute logger_add_event @varBuildId, 3, 'Process identifier: ' || @varProcessIdentifier, null            execute logger_add_event @varBuildId, 3, 'Refresh identifier: ' || @parRefreshIdentifier, null            execute logger_add_event @varBuildId, 3, 'Build ID: ' || @varBuildId, null            execute logger_add_event @varBuildId, 3, 'User context: ' || @varUsername, null            execute logger_add_event @varBuildId, 3, 'Period: ' || dateformat(@parStartDate, 'dd/mm/yyyy') || ' - ' || dateformat(@parEndDate, 'dd/mm/yyyy'), null        end        -- ##############################################################################################################        -- ##### STEP 0.2 - requirement checks                                                                      #####        -- ##############################################################################################################      execute logger_add_event @varBuildId, 3, '>>>>> Step 0.2: Requirement checks <<<<<', null      if (@parOutputViewName is null) or (trim(@parOutputViewName) = '')        begin            execute logger_add_event @varBuildId, 1, '[!!!] Error: Output view name missing', null            execute logger_add_event @varBuildId, 1, '####### Process ended prematurely #######', null            execute logger_add_event @varBuildId, 1, ' ', null            return        end      if (@parStartDate > @parEndDate)        begin            execute logger_add_event @varBuildId, 1, '[!!!] Error - End Date cannot be earlier than Start Date', null            execute logger_add_event @varBuildId, 1, '####### Process ended prematurely #######', null            execute logger_add_event @varBuildId, 1, ' ', null            return        end      if (@parStartDate is null) or (@parEndDate is null)        begin            execute logger_add_event @varBuildId, 1, '[!!!] Error: value for @parStartDate and @parEndDate parameters must be provided'            execute logger_add_event @varBuildId, 1, '####### Process ended prematurely #######', null            execute logger_add_event @varBuildId, 1, ' ', null            return        end      if (@parEndDate > dateadd(month, 1, today()) - day(today()))        begin            execute logger_add_event @varBuildId, 1, '[!!!] Error: maximum date (month/year) for @parEndDate mustn''t be greater than the current month'            execute logger_add_event @varBuildId, 1, '####### Process ended prematurely #######', null            execute logger_add_event @varBuildId, 1, ' ', null            return        end      if (@parStartDate < '2012-08-01')        begin            execute logger_add_event @varBuildId, 1, '[!!!] Error: Phase1 data is not supported, @parStartDate must be greater or equal to 01/08/2012'            execute logger_add_event @varBuildId, 1, '####### Process ended prematurely #######', null            execute logger_add_event @varBuildId, 1, ' ', null            return        end      set @varSql = '                      declare @varQAResult integer                      set @varQAResult = (select count(*)                                            from dbo.sysusers a,                                                 dbo.sysobjects b                                            where a.uid = b.uid                                              and lower(a.name) = lower(''' || @varUsername || ''')                                              and lower(b.name) = lower(''' || @parOutputViewName || ''')                                              and b.type <> ''V'')                      if (@varQAResult > 0)                        begin                            execute logger_add_event ' || @varBuildId || ', 1, ''[!!!] Error: Unable to create view "' || @parOutputViewName || '" - another object type with this name exists'', null                            execute logger_add_event ' || @varBuildId || ', 1, ''####### Process ended prematurely #######'', null                            execute logger_add_event ' || @varBuildId || ', 1, '' '', null                            return                        end                    '      execute(@varSql)      commit      set @varQAResult = (select min(event_level)                            from z_logger_events                           where run_id = @varBuildId)      if (@varQAResult = 1)          return      if (@parLogQADetails = 1)        begin            execute logger_add_event @varBuildId, 3, 'All checks passed', null        end        -- Drop existing view to ensure it's not assumed it's been refreshed if errors have occured      set @varSql = '                    drop view if exists ' || @varOutputViewName || '                    '      execute(@varSql)      commit        -- ##############################################################################################################        -- ##### STEP 1.0 - creating source data view                                                               #####        -- ##############################################################################################################      execute logger_add_event @varBuildId, 3, '>>>>> Step 1.0: Creating source data view <<<<<', null        -- ##################################################        -- ##### VEA period only #####      if (@parStartDate <= '2013-01-31') and (@parEndDate <= '2013-01-31') and (@varSourceTable = '???')        begin            set @varSql = '                           create view ' || @varOutputViewName || ' as                             select ' || @varColumnList || ' from sk_prod.Vespa_Events_All                          '            set @varSourceTable = 'Vespa_Events_All'        end        -- ##################################################        -- ##### Mixture of the new data model & VEA #####      if (@parStartDate - 1 <= '2013-01-31') and (@varSourceTable = '???')                                                              -- "-1" to include previous day, required for certain processes        begin            set @varDate = '2013-02-01'            set @varSql = '                           create view ' || @varOutputViewName || ' as                             select ' || @varColumnList || ' from sk_prod.Vespa_Events_All                          '            while @varDate <= @parEndDate              begin                  set @varSql = @varSql ||                                  ' union all                                   select ' || @varColumnList || ' from sk_prod.Vespa_Dp_Prog_Viewed_' || dateformat(@varDate, 'yyyymm') || '                                  '                  set @varDate = dateadd(month, 1, @varDate)              end            set @varSourceTable = 'Vespa_Events_All/(...)/Dp_Prog_Viewed_' || dateformat(@parEndDate, 'yyyymm')        end        -- ##################################################        -- ##### New data model only #####      if (@varSourceTable = '???')        begin            set @varDate = @parStartDate - 1                                                                                            -- "-1" to include previous day, required for certain processes            set @varSql = '                           create view ' || @varOutputViewName || ' as                             select ' || @varColumnList || ' from sk_prod.Vespa_Dp_Prog_Viewed_' || dateformat(@varDate, 'yyyymm') || '                          '            set @varDate = dateadd(month,                                                                                               -- Reset to the first of the month                                   1,                                   dateadd(day, -day(@varDate) + 1, @varDate)                                  )            set @varInt = 1            while @varDate <= @parEndDate              begin                  set @varSql = @varSql ||                                  ' union all                                   select ' || @varColumnList || ' from sk_prod.Vespa_Dp_Prog_Viewed_' || dateformat(@varDate, 'yyyymm') || '                                  '                  set @varDate = dateadd(month, 1, @varDate)                  set @varInt = @varInt + 1              end            if (@varInt = 1)                set @varSourceTable = 'Dp_Prog_Viewed_' || dateformat(@parStartDate - 1, 'yyyymm')            if (@varInt = 2)                set @varSourceTable = 'Dp_Prog_Viewed_' || dateformat(@parStartDate - 1, 'yyyymm') || ' and Dp_Prog_Viewed_' || dateformat(@parEndDate, 'yyyymm')            if (@varInt > 2)                set @varSourceTable = 'Dp_Prog_Viewed_' || dateformat(@parStartDate - 1, 'yyyymm') || '/(...)/Dp_Prog_Viewed_' || dateformat(@parEndDate, 'yyyymm')        end      execute(@varSql)      commit      if (@parLogQADetails = 1)        begin            execute logger_add_event @varBuildId, 3, 'View definition: ' || @varSourceTable, null        end        -- ##############################################################################################################      execute logger_add_event @varBuildId, 3, '####### Creating source data view - process completed #######', null      execute logger_add_event @varBuildId, 3, ' ', null -- #### (procedure end) #####end;commit;go  -- ##############################################################################################################  -- ##############################################################################################################  -- ##############################################################################################################